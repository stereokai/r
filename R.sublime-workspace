{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"side",
				"sidebar"
			],
			[
				"call",
				"callback"
			],
			[
				"tra",
				"translateY(-47	(index.html)"
			],
			[
				"max-",
				"max-width"
			],
			[
				"translate",
				"translateY(-47	(index.html)"
			],
			[
				"url",
				"url()"
			],
			[
				"tran",
				"translateY	(index.css)"
			],
			[
				"new",
				"newClient	(session.js)"
			],
			[
				"sess",
				"sessionId"
			],
			[
				"home",
				"homeAddress"
			],
			[
				"crea",
				"createdAt"
			],
			[
				"exp",
				"exports	(index.js)"
			],
			[
				"ses",
				"sessionstore.json"
			],
			[
				"body",
				"bodyParser"
			],
			[
				"rel",
				"relative"
			],
			[
				"pos",
				"position"
			],
			[
				"back",
				"background"
			],
			[
				"textal",
				"text-align"
			],
			[
				"doc",
				"document	(index.html)"
			],
			[
				"old",
				"oldMethod"
			],
			[
				"position",
				"position:absolute	(angular.js)"
			],
			[
				"scr",
				"scroll	(results.js)"
			],
			[
				"parent",
				"parentElement	(angular-animate.js)"
			],
			[
				"Abs",
				"AbsoluteName"
			],
			[
				"pro",
				"proto	Prototype"
			],
			[
				"len",
				"length"
			],
			[
				"string",
				"stringPrototype"
			],
			[
				"level",
				"levelUp"
			],
			[
				"appe",
				"append"
			],
			[
				"Ab",
				"AbsoluteName"
			],
			[
				"Absolu",
				"AbsoluteName"
			],
			[
				"abso",
				"absoluteName"
			],
			[
				"save",
				"saveMethod"
			],
			[
				"absol",
				"absoluteName"
			],
			[
				"fun",
				"function"
			],
			[
				"type",
				"typeof"
			],
			[
				"c",
				"console"
			],
			[
				"bin",
				"bind"
			],
			[
				"deb",
				"debugger	(tileGrid.js)"
			],
			[
				"time",
				"timeout	setTimeout function"
			],
			[
				"ren",
				"render	(angular.js)"
			],
			[
				"Sea",
				"Search_Results"
			],
			[
				"arra",
				"arrayItem"
			],
			[
				"arr",
				"arrayItem"
			],
			[
				"lastIndex",
				"lastIndexOf	(angular.js)"
			],
			[
				"sub",
				"substring	(angular.js)"
			],
			[
				"abs",
				"absoluteName"
			],
			[
				"ab",
				"absoluteName"
			],
			[
				"i",
				"injector"
			],
			[
				"proto",
				"prototype"
			],
			[
				"index",
				"indexOf	(angular.js)"
			],
			[
				"getc",
				"getClassOf"
			],
			[
				"pto",
				"prototype"
			],
			[
				"getpr",
				"getProtoOf"
			],
			[
				"__",
				"__proto__"
			],
			[
				"con",
				"constructor"
			],
			[
				"DIREC",
				"Directive"
			],
			[
				"player",
				"playerUrl"
			],
			[
				"gb",
				"getBandcampEmbedPlayer"
			],
			[
				"get",
				"get"
			],
			[
				"pla",
				"playerUrl"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/Tom/OneDrive/Documents/meteor.md",
			"settings":
			{
				"buffer_size": 4284,
				"line_ending": "Windows",
				"name": "meteor is an open source platform for writing appl"
			}
		},
		{
			"contents": "1.ทางของฉัน ฝันของเธอ\n2.ความซื่อสัตย์\n3.ขอบฟ้า\n4.ยาพิษ\n5.คราม\n6.เรือเล็กควรออกจากฝั่ง\n7.เสี้ยววินาที\n8.ปลายทาง\n9.ความรัก\n10.อากาศ\n11.รักอยู่ข้างเธอ Feat. พี่ปุ๊ อัญชลี\n12.แค่หลับตา Feat. พี่ปุ๊ อัญชลี\n13.ห้ามใจ\n14.หวั่นไหว\n15.คิดถึง\n16.ความฝันกับจักรวาล\n17.ครึ่งหลับครึ่งตื่น\n18.ปล่อย Feat. พี่ป๊อด Moderndog\n19.คนที่ถูกรัก Feat. Moderndog\n20.ตาสว่าง Feat. พี่ป๊อด Moderndog, LABANOON\n21.ยาม Feat. LABANOON\n22.ปลิดปลิว Feat. เมธี LABANOON\n23.ความเชื่อ\n24.ชีวิตเป็นของเรา\n25.คนมีตังค์\n26.ทางกลับบ้าน\n27.เปราะบาง\n28.งมงาย Feat. BIG ASS\n29.ความรักทำให้คนตาบอด Feat. BIG ASS\n30.ย้ำ Feat. BIG ASS\n31.อย่างน้อย Feat. BIG ASS\n32.สักวันฉันจะดีพอ Feat. พี่เภา\n33.Bodyslam Feat. พี่เภา\n34.คิดฮอด Feat. พี่นาง ศิริพร อำไพพงษ์\n35.Sticker Feat. กอล์ฟ ฟักกลิ้งฮีโร่, อุ๋ย บุดดาเบลส\n36.ดัม-มะ-ชา-ติ\n37.อกหัก\n38.แสงสุดท้าย\n39.ชีวิตยังคงสวยงาม",
			"settings":
			{
				"buffer_size": 826,
				"line_ending": "Windows",
				"name": "1.ทางของฉัน ฝันของเธอ"
			}
		},
		{
			"contents": "prior to the release of firefox, we experienced a decade (give or take) \n\ncyrrent state of FED ecosystems and the community, akin to a child with ADHD walking into a toy store where every 60 seconds all the toys in one section get magically replaced with bigger, better, flashier versions from a new manufacturer.\n\nhow long could this be sustained?\n\nas more and more concepts are integrated into the standard\n\nwould we reach \n\na few libraries and stick with them, or has it become our nature to pursue the next best thing TM\n\n",
			"settings":
			{
				"buffer_size": 526,
				"line_ending": "Windows",
				"name": "prior to the release of firefox, we experienced a"
			}
		},
		{
			"file": "js/index.js",
			"settings":
			{
				"buffer_size": 1309,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tom/Dev/smashing-input-events/taps.js",
			"settings":
			{
				"buffer_size": 807,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tom/Dev/smashing-input-events/taps.html",
			"settings":
			{
				"buffer_size": 1280,
				"line_ending": "Windows"
			}
		},
		{
			"file": "R.sublime-project",
			"settings":
			{
				"buffer_size": 93,
				"line_ending": "Unix"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 11183,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "1st thing should be coconut oil - picture on right\n2nd coconut farm \"sell coconut in bulk\" - picture on left\n3rd truck - picture on right\n4 car for rent - picture on left\n5 laundry - picture on right",
			"settings":
			{
				"buffer_size": 199,
				"line_ending": "Windows",
				"name": "1st thing should be coconut oil - picture on right"
			}
		},
		{
			"file": "css/index.css",
			"settings":
			{
				"buffer_size": 29584,
				"line_ending": "Windows"
			}
		},
		{
			"file": "scripts/start.js",
			"settings":
			{
				"buffer_size": 913,
				"line_ending": "Windows"
			}
		},
		{
			"file": "package.json",
			"settings":
			{
				"buffer_size": 376,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/* See also:\n    http://www.html5rocks.com/en/tutorials/webrtc/basics/\n    https://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/index.html\n\n    https://webrtc-demos.appspot.com/html/pc1.html\n*/\n\nvar cfg = {\"iceServers\":[{\"url\":\"stun:23.21.150.121\"}]},\n    con = { 'optional': [{'DtlsSrtpKeyAgreement': true}] };\n\n/* THIS IS ALICE, THE CALLER/SENDER */\n\nvar pc1 = new RTCPeerConnection(cfg, con),\n    dc1 = null, tn1 = null;\n\n// Since the same JS file contains code for both sides of the connection,\n// activedc tracks which of the two possible datachannel variables we're using.\nvar activedc;\n\nvar pc1icedone = false;\n\n$('#showLocalOffer').modal('hide');\n$('#getRemoteAnswer').modal('hide');\n$('#waitForConnection').modal('hide');\n$('#createOrJoin').modal('show');\n\n$('#createBtn').click(function() {\n    $('#showLocalOffer').modal('show');\n    createLocalOffer();\n});\n\n$('#joinBtn').click(function() {\n    $('#getRemoteOffer').modal('show');\n});\n\n$('#offerSentBtn').click(function() {\n    $('#getRemoteAnswer').modal('show');\n});\n\n$('#offerRecdBtn').click(function() {\n    var offer = $('#remoteOffer').val();\n    var offerDesc = new RTCSessionDescription(JSON.parse(offer));\n    console.log(\"Received remote offer\", offerDesc);\n    writeToChatLog(\"Received remote offer\", \"text-success\");\n    handleOfferFromPC1(offerDesc);\n    $('#showLocalAnswer').modal('show');\n});\n\n$('#answerSentBtn').click(function() {\n    $('#waitForConnection').modal('show');\n});\n\n$('#answerRecdBtn').click(function() {\n    var answer = $('#remoteAnswer').val();\n    var answerDesc = new RTCSessionDescription(JSON.parse(answer));\n    handleAnswerFromPC2(answerDesc);\n    $('#waitForConnection').modal('show');\n});\n\n$('#fileBtn').change(function() {\n    var file = this.files[0];\n    console.log(file);\n\n    sendFile(file);\n});\n\nfunction fileSent(file) {\n    console.log(file + \" sent\");\n}\n\nfunction fileProgress(file) {\n    console.log(file + \" progress\");\n}\n\nfunction sendFile(data) {\n    if (data.size) {\n        FileSender.send({\n          file: data,\n          onFileSent: fileSent,\n          onFileProgress: fileProgress,\n        });\n    }\n}\n\nfunction sendMessage() {\n    if ($('#messageTextBox').val()) {\n        var channel = new RTCMultiSession();\n        writeToChatLog($('#messageTextBox').val(), \"text-success\");\n        channel.send({message: $('#messageTextBox').val()});\n        $('#messageTextBox').val(\"\");\n\n        // Scroll chat text area to the bottom on new input.\n        $('#chatlog').scrollTop($('#chatlog')[0].scrollHeight);\n    }\n\n    return false;\n};\n\nfunction setupDC1() {\n    try {\n        var fileReceiver1 = new FileReceiver();\n        dc1 = pc1.createDataChannel('test', {reliable:true});\n        activedc = dc1;\n        console.log(\"Created datachannel (pc1)\");\n        dc1.onopen = function (e) {\n            console.log('data channel connect');\n            $('#waitForConnection').modal('hide');\n            $('#waitForConnection').remove();\n        }\n        dc1.onmessage = function (e) {\n            console.log(\"Got message (pc1)\", e.data);\n            if (e.data.size) {\n                fileReceiver1.receive(e.data, {});\n            }\n            else {\n                if (e.data.charCodeAt(0) == 2) {\n                   // The first message we get from Firefox (but not Chrome)\n                   // is literal ASCII 2 and I don't understand why -- if we\n                   // leave it in, JSON.parse() will barf.\n                   return;\n                }\n                console.log(e);\n                var data = JSON.parse(e.data);\n                if (data.type === 'file') {\n                    fileReceiver1.receive(e.data, {});\n                }\n                else {\n                    writeToChatLog(data.message, \"text-info\");\n                    // Scroll chat text area to the bottom on new input.\n                    $('#chatlog').scrollTop($('#chatlog')[0].scrollHeight);\n                }\n            }\n        };\n    } catch (e) { console.warn(\"No data channel (pc1)\", e); }\n}\n\nfunction createLocalOffer() {\n    setupDC1();\n    pc1.createOffer(function (desc) {\n        pc1.setLocalDescription(desc, function () {}, function () {});\n        console.log(\"created local offer\", desc);\n    }, function () {console.warn(\"Couldn't create offer\");});\n}\n\npc1.onicecandidate = function (e) {\n    console.log(\"ICE candidate (pc1)\", e);\n    if (e.candidate == null) {\n        $('#localOffer').html(JSON.stringify(pc1.localDescription));\n    }\n};\n\nfunction handleOnconnection() {\n    console.log(\"Datachannel connected\");\n    writeToChatLog(\"Datachannel connected\", \"text-success\");\n    $('#waitForConnection').modal('hide');\n    // If we didn't call remove() here, there would be a race on pc2:\n    //   - first onconnection() hides the dialog, then someone clicks\n    //     on answerSentBtn which shows it, and it stays shown forever.\n    $('#waitForConnection').remove();\n    $('#showLocalAnswer').modal('hide');\n    $('#messageTextBox').focus();\n}\n\npc1.onconnection = handleOnconnection;\n\nfunction onsignalingstatechange(state) {\n    console.info('signaling state change:', state);\n}\n\nfunction oniceconnectionstatechange(state) {\n    console.info('ice connection state change:', state);\n}\n\nfunction onicegatheringstatechange(state) {\n    console.info('ice gathering state change:', state);\n}\n\npc1.onsignalingstatechange = onsignalingstatechange;\npc1.oniceconnectionstatechange = oniceconnectionstatechange;\npc1.onicegatheringstatechange = onicegatheringstatechange;\n\nfunction handleAnswerFromPC2(answerDesc) {\n    console.log(\"Received remote answer: \", answerDesc);\n    writeToChatLog(\"Received remote answer\", \"text-success\");\n    pc1.setRemoteDescription(answerDesc);\n}\n\nfunction handleCandidateFromPC2(iceCandidate) {\n    pc1.addIceCandidate(iceCandidate);\n}\n\n\n/* THIS IS BOB, THE ANSWERER/RECEIVER */\n\nvar pc2 = new RTCPeerConnection(cfg, con),\n    dc2 = null;\n\nvar pc2icedone = false;\n\npc2.ondatachannel = function (e) {\n    var fileReceiver2 = new FileReceiver();\n    var datachannel = e.channel || e; // Chrome sends event, FF sends raw channel\n    console.log(\"Received datachannel (pc2)\", arguments);\n    dc2 = datachannel;\n    activedc = dc2;\n    dc2.onopen = function (e) {\n        console.log('data channel connect');\n        $('#waitForConnection').modal('hide');\n        $('#waitForConnection').remove();\n    }\n    dc2.onmessage = function (e) {\n        console.log(\"Got message (pc2)\", e.data);\n        if (e.data.size) {\n            fileReceiver2.receive(e.data, {});\n        }\n        else {\n            var data = JSON.parse(e.data);\n            if (data.type === 'file') {\n                fileReceiver2.receive(e.data, {});\n            }\n            else {\n                writeToChatLog(data.message, \"text-info\");\n                // Scroll chat text area to the bottom on new input.\n                $('#chatlog').scrollTop($('#chatlog')[0].scrollHeight);\n            }\n        }\n    };\n};\n\nfunction handleOfferFromPC1(offerDesc) {\n    pc2.setRemoteDescription(offerDesc);\n    pc2.createAnswer(function (answerDesc) {\n        writeToChatLog(\"Created local answer\", \"text-success\");\n        console.log(\"Created local answer: \", answerDesc);\n        pc2.setLocalDescription(answerDesc);\n    }, function () { console.warn(\"No create answer\"); });\n}\n\npc2.onicecandidate = function (e) {\n    console.log(\"ICE candidate (pc2)\", e);\n    if (e.candidate == null)\n       $('#localAnswer').html(JSON.stringify(pc2.localDescription));\n};\n\npc2.onsignalingstatechange = onsignalingstatechange;\npc2.oniceconnectionstatechange = oniceconnectionstatechange;\npc2.onicegatheringstatechange = onicegatheringstatechange;\n\nfunction handleCandidateFromPC1(iceCandidate) {\n    pc2.addIceCandidate(iceCandidate);\n}\n\npc2.onaddstream = function (e) {\n    console.log(\"Got remote stream\", e);\n    var el = new Audio();\n    el.autoplay = true;\n    attachMediaStream(el, e.stream);\n};\n\npc2.onconnection = handleOnconnection;\n\nfunction getTimestamp() {\n    var totalSec = new Date().getTime() / 1000;\n    var hours = parseInt(totalSec / 3600) % 24;\n    var minutes = parseInt(totalSec / 60) % 60;\n    var seconds = parseInt(totalSec % 60);\n\n    var result = (hours < 10 ? \"0\" + hours : hours) + \":\" +\n                 (minutes < 10 ? \"0\" + minutes : minutes) + \":\" +\n                 (seconds  < 10 ? \"0\" + seconds : seconds);\n\n    return result;\n}\n\nfunction writeToChatLog(message, message_type) {\n    document.getElementById('chatlog').innerHTML += '<p class=\\\"' + message_type + '\\\">' + \"[\" + getTimestamp() + \"] \" + message + '</p>';\n}",
			"settings":
			{
				"buffer_size": 8581,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/* See also:\n    http://www.html5rocks.com/en/tutorials/webrtc/basics/\n    https://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/index.html\n\n    https://webrtc-demos.appspot.com/html/pc1.html\n*/\n\nvar cfg = {\"iceServers\":[{\"url\":\"stun:23.21.150.121\"}]},\n    con = { 'optional': [{'DtlsSrtpKeyAgreement': true}] };\n\n/* THIS IS ALICE, THE CALLER/SENDER */\n\nvar pc1 = new RTCPeerConnection(cfg, con),\n    dc1 = null, tn1 = null;\n\n// Since the same JS file contains code for both sides of the connection,\n// activedc tracks which of the two possible datachannel variables we're using.\nvar activedc;\n\nvar pc1icedone = false;\n\nvar qrFlow;\n\n$('#showLocalOffer').modal('hide');\n$('#getRemoteAnswer').modal('hide');\n$('#waitForConnection').modal('hide');\n$('#qrFlow').modal('hide');\n$('#createOrJoin').modal('show');\n\n$('#createBtn').click(function() {\n    if ($('#using-camera').prop('checked')) {\n        qrFlow = new QRFlow(true);\n    } else {\n        $('#showLocalOffer').modal('show');\n    }\n    createLocalOffer();\n});\n\n$('#joinBtn').click(function() {\n    if ($('#using-camera').prop('checked')) {\n        qrFlow = new QRFlow(false);\n    } else {\n        $('#getRemoteOffer').modal('show');\n    }\n});\n\n$('#offerSentBtn').click(function() {\n    $('#getRemoteAnswer').modal('show');\n});\n\nfunction handleJsonOfferFromPC1(offer) {\n    var offerDesc = new RTCSessionDescription(JSON.parse(offer));\n    handleOfferFromPC1(offerDesc);\n}\n\n$('#offerRecdBtn').click(function() {\n    var offer = $('#remoteOffer').val();\n    handleJsonOfferFromPC1(offer);\n    $('#showLocalAnswer').modal('show');\n});\n\n$('#answerSentBtn').click(function() {\n    $('#waitForConnection').modal('show');\n});\n\nfunction handleJsonAnswerFromPC2(answer) {\n    var answerDesc = new RTCSessionDescription(JSON.parse(answer));\n    handleAnswerFromPC2(answerDesc);\n}\n\n$('#answerRecdBtn').click(function() {\n    var answer = $('#remoteAnswer').val();\n    handleJsonAnswerFromPC2(answer);\n    $('#waitForConnection').modal('show');\n});\n\n$('#fileBtn').change(function() {\n    var file = this.files[0];\n    console.log(file);\n\n    sendFile(file);\n});\n\nfunction fileSent(file) {\n    console.log(file + \" sent\");\n}\n\nfunction fileProgress(file) {\n    console.log(file + \" progress\");\n}\n\nfunction sendFile(data) {\n    if (data.size) {\n        FileSender.send({\n          file: data,\n          onFileSent: fileSent,\n          onFileProgress: fileProgress,\n        });\n    }\n}\n\nfunction sendMessage() {\n    if ($('#messageTextBox').val()) {\n        var channel = new RTCMultiSession();\n        writeToChatLog($('#messageTextBox').val(), \"text-success\");\n        channel.send({message: $('#messageTextBox').val()});\n        $('#messageTextBox').val(\"\");\n\n        // Scroll chat text area to the bottom on new input.\n        $('#chatlog').scrollTop($('#chatlog')[0].scrollHeight);\n    }\n\n    return false;\n};\n\nfunction setupDC1() {\n    try {\n        var fileReceiver1 = new FileReceiver();\n        dc1 = pc1.createDataChannel('test', {reliable:true});\n        activedc = dc1;\n        console.log(\"Created datachannel (pc1)\");\n        dc1.onopen = function (e) {\n            console.log('data channel connect');\n            $('#waitForConnection').modal('hide');\n            $('#waitForConnection').remove();\n            if (qrFlow) {\n                qrFlow.remove();\n            }\n        }\n        dc1.onmessage = function (e) {\n            console.log(\"Got message (pc1)\", e.data);\n            if (e.data.size) {\n                fileReceiver1.receive(e.data, {});\n            }\n            else {\n                if (e.data.charCodeAt(0) == 2) {\n                   // The first message we get from Firefox (but not Chrome)\n                   // is literal ASCII 2 and I don't understand why -- if we\n                   // leave it in, JSON.parse() will barf.\n                   return;\n                }\n                console.log(e);\n                var data = JSON.parse(e.data);\n                if (data.type === 'file') {\n                    fileReceiver1.receive(e.data, {});\n                }\n                else {\n                    writeToChatLog(data.message, \"text-info\");\n                    // Scroll chat text area to the bottom on new input.\n                    $('#chatlog').scrollTop($('#chatlog')[0].scrollHeight);\n                }\n            }\n        };\n    } catch (e) { console.warn(\"No data channel (pc1)\", e); }\n}\n\nfunction createLocalOffer() {\n    setupDC1();\n    pc1.createOffer(function (desc) {\n        pc1.setLocalDescription(desc, function () {});\n        console.log(\"created local offer\", desc);\n    }, function () {console.warn(\"Couldn't create offer\");});\n}\n\npc1.onicecandidate = function (e) {\n    console.log(\"ICE candidate (pc1)\", e);\n    if (e.candidate == null) {\n        var s = JSON.stringify(pc1.localDescription);\n        if (qrFlow) {\n            qrFlow.showQRCodes(s);\n        } else {\n            $('#localOffer').html(s);\n        }\n    }\n};\n\nfunction handleOnconnection() {\n    console.log(\"Datachannel connected\");\n    writeToChatLog(\"Datachannel connected\", \"text-success\");\n    $('#waitForConnection').modal('hide');\n    // If we didn't call remove() here, there would be a race on pc2:\n    //   - first onconnection() hides the dialog, then someone clicks\n    //     on answerSentBtn which shows it, and it stays shown forever.\n    $('#waitForConnection').remove();\n    if (qrFlow) {\n        qrFlow.remove();\n    }\n    $('#showLocalAnswer').modal('hide');\n    $('#messageTextBox').focus();\n}\n\npc1.onconnection = handleOnconnection;\n\nfunction onsignalingstatechange(state) {\n    console.info('signaling state change:', state);\n}\n\nfunction oniceconnectionstatechange(state) {\n    console.info('ice connection state change:', state);\n}\n\nfunction onicegatheringstatechange(state) {\n    console.info('ice gathering state change:', state);\n}\n\npc1.onsignalingstatechange = onsignalingstatechange;\npc1.oniceconnectionstatechange = oniceconnectionstatechange;\npc1.onicegatheringstatechange = onicegatheringstatechange;\n\nfunction handleAnswerFromPC2(answerDesc) {\n    console.log(\"Received remote answer: \", answerDesc);\n    writeToChatLog(\"Received remote answer\", \"text-success\");\n    pc1.setRemoteDescription(answerDesc);\n}\n\n\n/* THIS IS BOB, THE ANSWERER/RECEIVER */\n\nvar pc2 = new RTCPeerConnection(cfg, con),\n    dc2 = null;\n\nvar pc2icedone = false;\n\npc2.ondatachannel = function (e) {\n    var fileReceiver2 = new FileReceiver();\n    var datachannel = e.channel || e; // Chrome sends event, FF sends raw channel\n    console.log(\"Received datachannel (pc2)\", arguments);\n    dc2 = datachannel;\n    activedc = dc2;\n    dc2.onopen = function (e) {\n        console.log('data channel connect');\n        $('#waitForConnection').remove();\n        if (qrFlow) {\n            qrFlow.remove();\n        }\n    }\n    dc2.onmessage = function (e) {\n        console.log(\"Got message (pc2)\", e.data);\n        if (e.data.size) {\n            fileReceiver2.receive(e.data, {});\n        }\n        else {\n            var data = JSON.parse(e.data);\n            if (data.type === 'file') {\n                fileReceiver2.receive(e.data, {});\n            }\n            else {\n                writeToChatLog(data.message, \"text-info\");\n                // Scroll chat text area to the bottom on new input.\n                $('#chatlog').scrollTop($('#chatlog')[0].scrollHeight);\n            }\n        }\n    };\n};\n\nfunction handleOfferFromPC1(offerDesc) {\n    console.log(\"Received remote offer\", offerDesc);\n    writeToChatLog(\"Received remote offer\", \"text-success\");\n    pc2.setRemoteDescription(offerDesc);\n    pc2.createAnswer(function (answerDesc) {\n        writeToChatLog(\"Created local answer\", \"text-success\");\n        console.log(\"Created local answer: \", answerDesc);\n        pc2.setLocalDescription(answerDesc);\n    }, function () { console.warn(\"No create answer\"); });\n}\n\npc2.onicecandidate = function (e) {\n    console.log(\"ICE candidate (pc2)\", e);\n    if (e.candidate == null) {\n        var s = JSON.stringify(pc2.localDescription);\n        if (qrFlow) {\n            qrFlow.showQRCodes(s);\n        } else {\n            $('#localAnswer').html(s);\n        }\n    }\n};\n\npc2.onsignalingstatechange = onsignalingstatechange;\npc2.oniceconnectionstatechange = oniceconnectionstatechange;\npc2.onicegatheringstatechange = onicegatheringstatechange;\n\npc2.onaddstream = function (e) {\n    console.log(\"Got remote stream\", e);\n    var el = new Audio();\n    el.autoplay = true;\n    attachMediaStream(el, e.stream);\n};\n\npc2.onconnection = handleOnconnection;\n\nfunction getTimestamp() {\n    var totalSec = new Date().getTime() / 1000;\n    var hours = parseInt(totalSec / 3600) % 24;\n    var minutes = parseInt(totalSec / 60) % 60;\n    var seconds = parseInt(totalSec % 60);\n\n    var result = (hours < 10 ? \"0\" + hours : hours) + \":\" +\n                 (minutes < 10 ? \"0\" + minutes : minutes) + \":\" +\n                 (seconds  < 10 ? \"0\" + seconds : seconds);\n\n    return result;\n}\n\nfunction writeToChatLog(message, message_type) {\n    document.getElementById('chatlog').innerHTML += '<p class=\\\"' + message_type + '\\\">' + \"[\" + getTimestamp() + \"] \" + message + '</p>';\n}\n\n\nfunction QRFlow(isOfferer) {\n    var cameraSelect = $('<select>')\n        .on('change', function() {\n            stopCamera();\n            startCamera();\n        });\n\n    // TODO: firefox doesn't support media stream track\n    MediaStreamTrack.getSources(function(sources) {\n        for (var i = 0; i < sources.length; i++) {\n            if (sources[i].kind === 'video') {\n                cameraSelect.append(\n                    $('<option>')\n                        .attr('value', sources[i].id)\n                        .text(sources[i].label)\n                );\n            }\n        }\n    });\n\n    var cameraCanvas = $('<canvas>')\n        .attr('id', 'qr-canvas') // this id is required for the jsqrcode lib\n        .css({\n            width: '256px'\n        });\n\n    var cameraProgress = $('<div>');\n\n    var cameraContainer = $('<div>')\n        .text(isOfferer ? 'After the other device receives our offer, use this camera to scan their answer:'\n                        : 'Use this camera to scan the offer from the other device:')\n        .append('<br>')\n        .append('Select camera:')\n        .append(cameraSelect)\n        .append('<br>')\n        .append(cameraCanvas)\n        .append(cameraProgress);\n\n    // If this is the offerer, createLocalOffer is called shortly afterwards to fill this with the qr code\n    var qrCodeContainer = $('<div>').text(isOfferer ? 'Generating offer.' : '');\n\n    var modal = $('#qrFlow');\n    if (isOfferer) {\n        // Send offer with QR code first, then get answer with camera\n        modal.find('.modal-body').append(qrCodeContainer).append(cameraContainer).append(video);\n    } else {\n        // Scan offer with camera first, then send answer with qr codes\n        modal.find('.modal-body').append(cameraContainer).append(qrCodeContainer).append(video);\n    }\n\n    // Start off hidden until video permissions are accepted and camera started\n    modal.find('.modal-body').hide();\n    modal.modal('show');\n\n    // Need a dummy <video> to attach the webcam stream to but we'll manually copy frames into cameraCanvas\n    var video = $('<video autoplay>').hide().appendTo('body');\n\n    startCamera();\n\n\n    var payloadSize = 400;\n    function encodeQRText(offset, compressedMessage) {\n        // The compressedMessage does fit in a single QR code but it's huge and hard to scan\n        // So we need to split them into smaller chunks\n        var payload = compressedMessage.substr(offset, payloadSize);\n        var qrText = ',' + offset + ',' + compressedMessage.length + ',' + payload;\n        // QR codes already have built in error detection/correction but I am still seeing errors\n        // Add a simple checksum to help with that\n        var checksum = 0;\n        for (var i = 0; i < qrText.length; i++) {\n            checksum += qrText.charCodeAt(i);\n        }\n        qrText = (checksum % 256) + qrText;\n        return qrText;\n    }\n\n    function decodeQRText(qrText) {\n        var split = qrText.split(',', 3);\n        if (split.length != 3) {\n            throw 'invalid format';\n        }\n\n        var checksum = parseInt(split[0]);\n        var offset = parseInt(split[1]);\n        var totalSize = parseInt(split[2]);\n        var payload = qrText.substr(split[0].length + 1 + split[1].length + 1 + split[2].length + 1);\n\n        // Check that parseInt succeeded\n        if (isNaN(checksum) || isNaN(offset) || isNaN(totalSize)) {\n            throw 'invalid format';\n        }\n\n        // Check checksum\n        var expectedCheckSum = 0;\n        for (var i = split[0].length; i < qrText.length; i++) {\n            expectedCheckSum += qrText.charCodeAt(i);\n        }\n        expectedCheckSum %= 256;\n        if (expectedCheckSum != checksum) {\n            throw 'invalid checksum ' + checksum + ' ' + expectedCheckSum;\n        }\n\n        // Check payload length\n        var expectedPayloadLength = Math.min(payloadSize, totalSize - offset);\n        if (payload.length != expectedPayloadLength) {\n            throw 'invalid payload length ' + payload.length + ' ' + expectedPayloadLength;\n        }\n\n        return {\n            offset: offset,\n            totalSize: totalSize,\n            payload: payload,\n        }\n    }\n\n    var sendLoop;\n    function showQRCodes(message) {\n        var compressedMessage = LZString.compressToBase64(message);\n\n        var numQRCodes = Math.ceil(compressedMessage.length / payloadSize);\n\n        var label = $('<div>').text('1 of ' + numQRCodes);\n\n        var qrCodes = $('<div>');\n        for (var offset = 0; offset < compressedMessage.length; offset += payloadSize) {\n            qrCodes.append(\n                $('<div>')\n                    .css({\n                        padding: '5px 0'\n                    })\n                    .qrcode({\n                        text: encodeQRText(offset, compressedMessage),\n                        correctLevel: 1, // QRErrorCorrectLevel.L\n                    })\n                    .hide()\n            );\n        }\n        qrCodes.children(':first').show();\n\n        // Rapidly flash a bunch of qr codes\n        var rotate = function(delta) {\n            var currVisible = qrCodes.children(':visible');\n            currVisible.hide();\n            var nextIndex = (currVisible.index() + delta + numQRCodes) % numQRCodes;\n            label.text((nextIndex + 1) + ' of ' + numQRCodes);\n            qrCodes.children(':eq(' + nextIndex + ')').show();\n        }\n        clearInterval(sendLoop);\n        sendLoop = setInterval(function() {\n            rotate(1);\n        }, 100);\n\n        qrCodeContainer\n            .text(\"Here's your \" + (isOfferer ? 'offer' : 'answer') + \". Send this by scanning with the other device's camera.\")\n            .append(label)\n            .append(qrCodes)\n            .append(\n                $('<button class=\"btn\">Previous block</button>')\n                    .on('click', function() {\n                        clearInterval(sendLoop);\n                        rotate(-1);\n                    })\n            )\n            .append(\n                $('<button class=\"btn\">Next block</button>')\n                    .css('margin-left', '50px')\n                    .on('click', function() {\n                        clearInterval(sendLoop);\n                        rotate(1);\n                    })\n            );\n    }\n\n    var blocks;\n    var blocksReceived;\n    var expectedMessageSize;\n    function receiveQRCode(s, callbackIfCompleted) {\n        console.log(s);\n\n        var message = decodeQRText(s);\n        var blockIndex = message.offset / payloadSize;\n        var numBlocks = Math.ceil(message.totalSize / payloadSize);\n\n        // First block ever received\n        if (!blocks) {\n            blocks = new Array(numBlocks);\n            blocksReceived = 0;\n            expectedMessageSize = message.totalSize;\n\n            if (isOfferer) {\n                // Since we got an answer, we know other device is not scanning our qr code anymore\n                qrCodeContainer.hide();\n            }\n\n            // Draw a progress bar to show which blocks were received\n            var progressBar = $('<div>').css({\n                position: 'relative',\n                height: '20px',\n            });\n            for (var i = 0; i < numBlocks; i++) {\n                progressBar.append(\n                    $('<div>')\n                        .addClass('progress-tick')\n                        .css({\n                            'position': 'absolute',\n                            'top': '0',\n                            'left': (i * 100 / numBlocks) + '%',\n                            'width': (100 / numBlocks) + '%',\n                            'height': '100%',\n                            'text-align': 'center',\n                        })\n                        .attr('title', i + 1)\n                        .text('Block ' + (i + 1))\n                );\n            }\n            cameraProgress\n                .text('Receiving ' + (isOfferer ? 'answer' : 'offer') + '. Blocks received:')\n                .append(progressBar);\n        } else {\n            // Check that the expected size is consistent with previous blocks\n            if (message.totalSize != expectedMessageSize) {\n                throw 'inconsistent size ' + message.totalSize + ' ' + expectedMessageSize;\n            }\n        }\n\n        // First time receiving this block\n        if (blocks[blockIndex] === undefined) {\n            blocks[blockIndex] = message.payload;\n            blocksReceived++;\n            cameraProgress.find('.progress-tick:eq(' + blockIndex + ')')\n                .css('background-color', 'black');\n\n            // If received everything, call callback\n            if (blocksReceived === numBlocks) {\n                var fullMessage = LZString.decompressFromBase64(blocks.join(''));\n                callbackIfCompleted(fullMessage);\n            }\n        }\n    }\n\n    var localMediaStream;\n    var receiveLoop;\n    function startCamera() {\n        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        window.URL = window.URL || window.webkitURL;\n        navigator.getUserMedia({\n            video: {\n                optional: [{sourceId: cameraSelect.val()}]\n            }\n        }, function (stream) {\n            if (!modal.find('.modal-body').is(':visible')) {\n                modal.find('.modal-header h3').text(isOfferer ? 'Send offer / get answer' :\n                                                                'Get offer / send answer');\n                modal.find('.modal-body').show();\n            }\n\n            localMediaStream = stream;\n            video[0].src = window.URL.createObjectURL(stream);\n            video[0].onloadedmetadata = function(e) {\n                cameraCanvas[0].width = video.width();\n                cameraCanvas[0].height = video.height();\n                receiveLoop = setInterval(function() {\n                    // Draw current frame\n                    cameraCanvas[0].getContext('2d').drawImage(video[0], 0, 0);\n\n                    // Try to look for a QR code\n                    qrcode.callback = function(s) {\n                        receiveQRCode(s, function(message) {\n                            if (isOfferer) {\n                                handleJsonAnswerFromPC2(message);\n                                stopCamera();\n                                cameraContainer.hide().after(\"Received answer. If this whole thing doesn't disappear in a few seconds it probably failed to connect!\");\n                            } else {\n                                handleJsonOfferFromPC1(message);\n                                stopCamera();\n                                cameraContainer.hide().after('Received offer.<br>');\n                                qrCodeContainer.text('Generating answer.');\n                            }\n                        });\n                    }\n                    qrcode.decode();\n                }, 33);\n            }\n        }, function (e) {\n            console.log(\"getUserMediaError\", e);\n        });\n    }\n\n    function stopCamera() {\n        clearInterval(receiveLoop);\n        video[0].src = null;\n        if (localMediaStream && localMediaStream.stop) {\n            localMediaStream.stop();\n        }\n    }\n\n    function remove() {\n        clearInterval(sendLoop);\n        stopCamera();\n        modal.modal('hide');\n    }\n\n    this.showQRCodes = showQRCodes;\n    this.remove = remove;\n}",
			"settings":
			{
				"buffer_size": 20572,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tom/Dev/pomodoroking-server/webrtc-shim.js",
			"settings":
			{
				"buffer_size": 2560,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Tom/Dev/facebook-uploader/app/scripts/services/debouncer.js",
			"settings":
			{
				"buffer_size": 505,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 400.0,
		"last_filter": "pclp",
		"selected_items":
		[
			[
				"pclp",
				"Package Control: List Packages"
			],
			[
				"pcip",
				"Package Control: Install Package"
			],
			[
				"lp",
				"Package Control: List Packages"
			],
			[
				"ip",
				"Package Control: Install Package"
			],
			[
				"rp",
				"Package Control: Remove Package"
			],
			[
				"open",
				"PackageResourceViewer: Open Resource"
			],
			[
				"packres",
				"PackageResourceViewer: Open Resource"
			]
		],
		"width": 520.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Tom/Dev/R",
		"/C/Users/Tom/Dev/R/css",
		"/C/Users/Tom/Dev/R/js",
		"/C/Users/Tom/Dev/R/scripts"
	],
	"file_history":
	[
		"/C/Users/Tom/Dev/R/CNAME",
		"/C/Users/Tom/Dev/pomodoroking-server/.gitignore",
		"/C/Users/Tom/Dev/pomodoroking-app/.gitignore",
		"/C/Users/Tom/Dev/facebook-uploader/.gitignore",
		"/C/Users/Tom/Dev/Clipro_2.2/.gitignore",
		"/C/Users/Tom/Dev/pomodoroking-server/index.html",
		"/C/Users/Tom/Dev/pomodoroking-server/session.js",
		"/C/Users/Tom/Dev/pomodoroking-server/phone.html",
		"/C/Users/Tom/Dev/pomodoroking-server/app.js",
		"/C/Users/Tom/Dev/pomodoroking-server/.git/config",
		"/C/Users/Tom/Dev/facebook-uploader/app/scripts/app.js",
		"/C/Users/Tom/Dev/R/node_modules/bs-html-injector/index.js",
		"/C/Users/Tom/Dev/embedexploder/server.js",
		"/C/Users/Tom/Dev/pomodoroking-server/sessionstore.json",
		"/C/Users/Tom/Dev/pomodoroking/package.json",
		"/C/Users/Tom/Dev/embedexploder/package.json",
		"/C/Users/Tom/Dev/pomodoroking-server/start.js",
		"/C/Users/Tom/Dev/pomodoroking-server/package.json",
		"/C/Users/Tom/Dev/clipro/app/scripts/workflow.js",
		"/C/Users/Tom/Dev/facebook-uploader/test/spec/services/debouncer.js",
		"/C/Users/Tom/Dev/facebook-uploader/app/scripts/services/debouncer.js",
		"/C/Users/Tom/Dev/email-analytics/_assets/devComps/js/workflow.js",
		"/C/Users/Tom/Dev/Clipro_2.2/_assets/devComps/js/workflow.js",
		"/C/Users/Tom/Downloads/TextCrawler.2.5.0.0.nupkg/tools/chocolateyInstall.ps1",
		"/C/Users/Tom/Dev/Clipro_2.2/_assets/devComps/js/polling.js",
		"/C/Users/Tom/Dev/head2head/app/scripts/services/resizer.js",
		"/C/Users/Tom/Dev/mangular/app/libs/angular/angular.js",
		"/C/Users/Tom/Downloads/webfontkit-20150816-002451/stylesheet.css",
		"/C/Users/Tom/Downloads/webfontkit-20150816-002451/ruttanunbold-demo.html",
		"/C/Users/Tom/Downloads/NewBaskervilleStd-Bold.otf",
		"/C/Users/Tom/Downloads/Adobe.Baskerville Cyrillic/Adobe.Baskerville Cyrillic/_BYB____.AFM",
		"/C/Users/Tom/Downloads/Adobe.Baskerville Cyrillic/Adobe.Baskerville Cyrillic/_BYB____.PFB",
		"/C/Users/Tom/Downloads/Adobe.Baskerville Cyrillic/Adobe.Baskerville Cyrillic/_BYB____.INF",
		"/C/Users/Tom/Dev/stereokai-player/index.js",
		"/C/Users/Tom/Dev/R/node_modules/bs-html-injector/package.json",
		"/C/Users/Tom/Dev/R/node_modules/bs-html-injector/node_modules/jsdom/package.json",
		"/D/Native Instruments Kontakt 5.3.0 WiN x86x64 + Update [deepstatus][h33t][1337x]/Native Instruments Kontakt 5.3.0 WiN x86x64 VST & Standalone/Native Instruments Kontakt 5.3.0 WiN x86x64 VST & Standalone/CHihM3R4.txt",
		"/D/58126/Users/tom/.gitconfig",
		"/D/Native Instruments Kontakt 5.3.0 WiN x86x64 + Update [deepstatus][h33t][1337x]/UPDATE-Native.Instruments.Kontakt.5.v5.3.0.UNLOCKED.Update/R2R.nfo",
		"/D/Ableton Live 9 Suite 9.1.3 (Win 64 bit) (patch - io) [ChingLiu]/ChingLiu.Install.Notes.nfo",
		"/D/Native Instruments Kontakt 5 v5.3.1 UNLOCKED Update-R2R [deepstatus][h33t][1337x][flashtorrents]/R2R.nfo",
		"/D/Rhythmic.Robot.Audio.Emulator.II.OMI.Universe.of.Sounds.Vol.1.KONTAKT-SYNTHiC4TE/RR EII UNIVERSE OF SOUNDS/emu.nicnt",
		"/D/Rhythmic.Robot.Audio.Emulator.II.OMI.Universe.of.Sounds.Vol.1.KONTAKT-SYNTHiC4TE/SYNTHiC4TE.nfo",
		"/C/Users/Tom/Dev/R/src/index.html",
		"/C/Users/Tom/Dev/stereokai-player/package.json",
		"/C/Users/Tom/Dev/R/R.sublime-project",
		"/C/Users/Tom/Dev/mangular/app/views/main.html",
		"/C/Users/Tom/Dev/mangular/app/scripts/controllers/engine.js",
		"/C/Users/Tom/Dev/mangular/app/styles/main.scss",
		"/C/Users/Tom/Dev/mangular/app/index.html",
		"/C/Users/Tom/Downloads/Korg.Legacy.Collection.WAVESTATION.v1.70.WIN.OSX.xxxl.Keygen-AiR/Korg.Legacy.Collection.WAVESTATION.v1.70.WIN.OSX.Incl.Keygen-AiR/air.nfo",
		"/C/Users/Tom/Dev/book-md-ui/client/consumer/templates/search/resultWrap.html",
		"/C/Users/Tom/Dev/book-md-ui/client/consumer/templates/search/appointment.html",
		"/C/Users/Tom/Dev/book-md-ui/client/consumer/templates/search/results.html",
		"/C/Users/Tom/Dev/book-md-ui/client/consumer/templates/search/results.js",
		"/C/Users/Tom/Dev/book-md-ui/client/consumer/templates/search/resultFooter.js",
		"/C/Users/Tom/Dev/book-md-ui/client/consumer/templates/search/main.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/directives/timeline/tileGrid.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/modules/routes.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/ui/auxButtons.js",
		"/C/Users/Tom/Dev/mangular/app/scripts/app.js",
		"/C/Users/Tom/Dev/mangular/app/scripts/directives/code-view.js",
		"/C/Users/Tom/Dev/mangular/app/scripts/directives/methodlist.js",
		"/C/Users/Tom/Dev/mangular/app/scripts/directives/searchfield.js",
		"/C/Users/Tom/Downloads/cmder_mini/README.md",
		"/C/Users/Tom/Dev/mangular/app/libs/perfect-scrollbar/css/perfect-scrollbar.css",
		"/C/Users/Tom/Dev/mangular/bower_components/angular-animate/angular-animate.js",
		"/C/Users/Tom/Dev/mangular/Gruntfile.js",
		"/C/Users/Tom/Dev/mangular/bower.json",
		"/C/Users/Tom/Dev/mangular/.tmp/styles/main.css",
		"/C/Users/Tom/Documents/WindowsPowerShell/Microsoft.PowerShell_profile.ps1",
		"/C/Users/Tom/Dev/mangular/bower_components/nanoscroller/bin/javascripts/jquery.nanoscroller.js",
		"/C/Users/Tom/.v8flags.3.28.71.19.Tom.json",
		"/C/Users/Tom/AppData/Local/Microsoft/Windows/INetCache/IE/Q2YOXAWS/recovery[1].log",
		"/C/Users/Tom/Dev/mangular/package.json",
		"/C/Users/Tom/.gitconfig",
		"/C/Users/Tom/Dev/sbnangular/Gruntfile.js",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/Babel/JavaScript (Babel).tmLanguage",
		"/C/Users/Tom/Dev/facebook-uploader/Gruntfile.js",
		"/C/Users/Tom/Dev/clipro/Gruntfile.js",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/Babel/Monokai Phoenix.YAML-tmTheme",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/Babel/Monokai Phoenix.tmTheme",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/Babel/JavaScript (Babel).YAML-tmLanguage",
		"/C/Users/Tom/AppData/Local/Microsoft/Windows/INetCache/IE/N6V682AY/system.ext4.win[1].md5",
		"/C/Users/Tom/AppData/Local/Microsoft/Windows/INetCache/IE/7RUSVPOK/boot.emmc.win[1].md5",
		"/C/Users/Tom/AppData/Local/Microsoft/Windows/INetCache/IE/N6V682AY/data.ext4.win[1].md5",
		"/C/Users/Tom/AppData/Local/Microsoft/Windows/INetCache/IE/7RUSVPOK/logo.emmc.win[1].md5",
		"/C/Users/Tom/AppData/Local/Microsoft/Windows/INetCache/IE/OM6G3K4D/.twrps[1].twrps",
		"/C/Users/Tom/Dev/stereokai-player/gulpfile.js",
		"/C/Users/Tom/Dev/stereokai-player/bower.json",
		"/C/Users/Tom/Dev/stereokai-player/app/index.html",
		"/C/Users/Tom/Dev/stereokai-player/app/styles/main.scss",
		"/C/Users/Tom/AppData/Roaming/npm/node_modules/amok/node_modules/ware/Readme.md",
		"/C/Users/Tom/AppData/Roaming/npm/node_modules/amok/node_modules/ware/lib/index.js",
		"/C/Users/Tom/AppData/Roaming/npm/node_modules/amok/lib/index.js",
		"/C/Users/Tom/Dev/stereokai-player/index.jsx",
		"/C/Users/Tom/AppData/Roaming/npm/node_modules/amok/bin/amok.js",
		"/C/Users/Tom/.gitignore",
		"/C/Users/Tom/.bash_history",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/ui/mainPreloader.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/modules/api.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/modules/auth.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/ui/breadcrumbs.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/ui/chassis.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/trigger.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/mainController.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/page.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/themes.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/authHook.js",
		"/C/Users/Tom/Dev/sbnangular/app/scripts/services/session.js",
		"/C/Users/Tom/Dev/app/scripts/directives/timeline/tileGrid.js",
		"/C/Users/Tom/Dropbox/Sublime Text/Packages/BracketHighlighter/bh_wrapping.sublime-settings",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/BracketHighlighter/bh_core.sublime-settings",
		"/C/Users/Tom/Dropbox/Sublime Text/Packages/BracketHighlighter/bh_swapping.sublime-settings",
		"/C/Users/Tom/Dropbox/Sublime Text/Packages/BracketHighlighter/bh_core.sublime-settings",
		"/C/Users/Tom/Dropbox/Sublime Text/Packages/User/Package Control.sublime-settings",
		"/C/Users/Tom/Dropbox/Sublime Text/Packages/User/Preferences.sublime-settings",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/User/ColorHighlighter.sublime-settings",
		"/C/Users/Tom/Dropbox/Sublime Text/Packages/User/ColorHighlighter.sublime-settings",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-mousemap",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-mousemap",
		"/C/Users/Tom/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Tom/Dropbox/Sublime Text/Packages/User/JavaScript.sublime-settings",
		"/C/Users/Tom/Downloads/posh-monokai-master/posh-monokai-master/HKCU-Console.reg",
		"/C/Users/Tom/Downloads/posh-monokai-master/posh-monokai-master/register-console-font.reg"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 112.0,
		"where_history":
		[
			"<open folders>",
			"C:\\Users\\Tom\\AppData\\Roaming\\Sublime Text 3\\Packages\\Babel"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			".5rem",
			"tappable",
			"event",
			".sidebar",
			"header",
			"style=\"margin-bottom: 0\"",
			"style=\"margin-top: 0\"",
			"\"></",
			"-md",
			"col-md",
			"top",
			"name",
			"\nbody > .padding {\n  display: none;\n}",
			"header",
			"<<i>",
			"<h3>",
			"h3",
			"dia",
			".shadow",
			"shadow",
			"h1",
			"padding",
			"h1",
			"An independent l",
			"an independent l",
			"An independent l",
			"An independent local family business, providing professional and leisure services to locals, tourists, visitors and ex-pats in Koh Samui, Thailand",
			"img/oil5.jpg",
			"opengraph.jpg",
			"We believe that the rising global trends of outsourcing and information sharing are the face of the future.",
			"Sbn Web Solutions",
			"http://www.sbnwebsolutions.com",
			"</p>",
			"<p>",
			"p",
			"</b>",
			"<b>",
			"b",
			"list-st",
			"unstyled",
			"header",
			".page",
			"rutta",
			"18",
			"setupDC1",
			"\"",
			"desc",
			"Desc",
			"desc",
			"dc1",
			"DC1",
			"dc1",
			"DC1",
			"dc1",
			"DC1",
			"dc1",
			"tn1",
			"pc1",
			"PC1",
			"pc1",
			"upsave",
			"sessionId",
			"json",
			"sessionId",
			"request",
			"activedc",
			"right",
			"#box",
			"100",
			"200",
			"last",
			"#007FFF",
			"Honda Civic",
			"car",
			"h2",
			"header {",
			".wrap",
			"browserSync",
			"Browsersync",
			"browserSync",
			"Emulator",
			"EmulatorVol1",
			"#crossfade",
			"sqaure",
			"  box-sizing: border-box;",
			".wrap",
			"wrap",
			"border",
			"color",
			"  //   color: #FD971F\n",
			"color",
			"FD971F",
			" #",
			"selectedmethod",
			"-color: #eee",
			"rail {",
			":hover",
			":active",
			"js",
			"row",
			"\\/\\*.*\\*/(\\r|\\n\\r?){2}",
			"\\/\\*.*\\*",
			"concat",
			"main",
			"classNames",
			"getProtoOf",
			"getClassOf",
			"raf",
			"var CSS",
			"should",
			"_name",
			" = f",
			" =",
			"AbsoluteName.prototype.",
			"array",
			"arrayItem",
			"item",
			"Item",
			"item",
			"Item",
			"item",
			"classNames",
			"nameAdded",
			"item",
			"Name",
			"name",
			"Name",
			"name"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"h3",
			"",
			"0081FF"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": false,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/Tom/OneDrive/Documents/meteor.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4284,
						"regions":
						{
						},
						"selection":
						[
							[
								758,
								758
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "meteor is an open source platform for writing appl",
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 304.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 826,
						"regions":
						{
						},
						"selection":
						[
							[
								210,
								210
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "1.ทางของฉัน ฝันของเธอ",
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 526,
						"regions":
						{
						},
						"selection":
						[
							[
								314,
								314
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "prior to the release of firefox, we experienced a",
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "js/index.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1309,
						"regions":
						{
						},
						"selection":
						[
							[
								1288,
								1302
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 672.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/Tom/Dev/smashing-input-events/taps.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 807,
						"regions":
						{
						},
						"selection":
						[
							[
								807,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/Tom/Dev/smashing-input-events/taps.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1280,
						"regions":
						{
						},
						"selection":
						[
							[
								29,
								29
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "R.sublime-project",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 93,
						"regions":
						{
						},
						"selection":
						[
							[
								90,
								90
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/JavaScript/JSON.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11183,
						"regions":
						{
						},
						"selection":
						[
							[
								10142,
								10135
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3448.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 199,
						"regions":
						{
						},
						"selection":
						[
							[
								199,
								199
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"auto_name": "1st thing should be coconut oil - picture on right",
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "css/index.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29584,
						"regions":
						{
						},
						"selection":
						[
							[
								29503,
								29503
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31333.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "scripts/start.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 913,
						"regions":
						{
						},
						"selection":
						[
							[
								540,
								540
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "package.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 376,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Babel/JSON (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 12,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8581,
						"regions":
						{
						},
						"selection":
						[
							[
								7498,
								7498
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3052.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 13,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20572,
						"regions":
						{
						},
						"selection":
						[
							[
								1024,
								1005
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 220.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "/C/Users/Tom/Dev/pomodoroking-server/webrtc-shim.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2560,
						"regions":
						{
						},
						"selection":
						[
							[
								2560,
								2560
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "/C/Users/Tom/Dev/facebook-uploader/app/scripts/services/debouncer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 505,
						"regions":
						{
						},
						"selection":
						[
							[
								498,
								226
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Monokai.tmTheme",
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/Babel/JavaScript (Babel).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 116.0
	},
	"pinned_build_system": "",
	"project": "R.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"st",
				"scripts\\start.js"
			],
			[
				"engin",
				"app\\scripts\\controllers\\engine.js"
			],
			[
				"main",
				"app\\views\\main.html"
			],
			[
				"ind",
				"app\\index.html"
			],
			[
				"code",
				"app\\scripts\\directives\\code-view.js"
			],
			[
				"inde",
				"app\\index.html"
			],
			[
				"maiht",
				"app\\views\\main.html"
			],
			[
				"cv",
				"app\\scripts\\directives\\code-view.js"
			],
			[
				"scss",
				"app\\styles\\main.scss"
			],
			[
				"eng",
				"C:\\Users\\Tom\\Dev\\mangular\\app\\scripts\\controllers\\engine.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 271.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
